{
  "hash": "312f8cfe0fd6984c6c13cc9f78808c31",
  "result": {
    "markdown": "---\ntitle: \"LandCover\"\nauthor: \"Kate Becker\"\ndate: \"2023-12-14\"\nformat:\n  html:\n    theme: default\n    toc: true\n    number-sections: true\nimage: landcover.jpg\n---\n\n\n# Using Remote Sensing to Investigate Land Cover in California\n\n## About\n\nWith the increased use and advancements of Satellite Imagery and algorithms, researchers and citizen scientists can now monitor the impacts of human activities on our natural landscapes. Impacts include deforestation, urban expansion, overpopulation, pollution, extraction, and burning fossil fuels. Through the application of remote sensing techniques, spectral indices combined with specific spectral bands highlight various land cover characteristics, such as vegetation health, water content, and soil properties. In order to investigate land cover, this project will classify remotely sensed imagery into land cover classes through supervised and unsupervised approaches. Supervised approaches use training data labeled by the user, whereas unsupervised approaches use algorithms to create groups which are identified by the user afterward.\n\nFor further data, workflow, and project information refer to this GitHub link: https://github.com/kateebeckerr/RemoteSensing_Landcover\n\nCredit: this lab is based on a materials developed by Chris Kibler\n\n## Data Descriptors\n\nLandsat 5 Thematic Mapper: Landsat 5, developed by NASA, carries a multi-spectral scanner and thematic mapper while transmitting over 2.5 million images of land surface conditions around the world. The data use includes: - 1 scene from September 25, 2007 - bands: 1, 2, 3, 4, 5, 7 - Collection 2 surface reflectence product\n\nStudy area : Southern Santa Barbara county polygons\n\nTraining data : Training site polygon (character string with land cover type)\n\n## Relevant Libraries and Set Working Directory\n\nRelevant Libraries and Set Working Directory\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(terra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nterra 1.7.71\n```\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /Users/katebecker/Documents/Bren/kateebeckerr.github.io\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:terra':\n\n    intersect, union\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(rpart)\nlibrary(rpart.plot)\nlibrary(tmap)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n```\n:::\n\n```{.r .cell-code}\n#rm(list = ls())\n\n#Sets working directory using here package\n#here::i_am(\"Land_Analysis.Rmd\")\n#setwd(here())\n```\n:::\n\n\n## Data Import\n\nLandsat Imagery\n\n*Each file name ends with the band number\n\n*We will not be using band 6 since it corresponds to thermal data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# list files for each band, including the full file path\nfiles <- list.files(\"/Users/katebecker/Documents/Bren/Fall_Q/EDS_223/final/Landcover/RemoteSensing_Landcover/data/landsat-data\", full.names = TRUE)\n\n# read in landsat data and stored as a raster stack acquired on September 25, 2007\nland_20070925 <- rast(files)\n\n# add layer names to match the band\n# Near infrared, short wave infrared 1, and short wave infrared 2 will be employed\nnames(land_20070925) <- c(\"blue\", \"green\", \"red\", \"NIR\", \"SWIR1\", \"SWIR2\")\n\n# plot true color image\n# Band 3 is used for red, band 2 for green, and band 1 for blue \n# stretch = \"lin\" stands for linear stretching, a common technique to enhance image contrast\nplotRGB(land_20070925, r = 3, g = 2, b = 1, stretch = \"lin\")\n```\n\n::: {.cell-output-display}\n![](LandCover_copy_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(land_20070925)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"SpatRaster\"\nattr(,\"package\")\n[1] \"terra\"\n```\n:::\n:::\n\n\n## Santa Barbara County Shapefile\n\n::: {.cell}\n\n```{.r .cell-code}\nSB <- st_read(\"/Users/katebecker/Documents/Bren/Fall_Q/EDS_223/final/Landcover/RemoteSensing_Landcover/data/SB_county_south.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `SB_county_south' from data source \n  `/Users/katebecker/Documents/Bren/Fall_Q/EDS_223/final/Landcover/RemoteSensing_Landcover/data/SB_county_south.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -120.2327 ymin: 34.33603 xmax: -119.5757 ymax: 34.53716\nGeodetic CRS:  NAD83\n```\n:::\n\n```{.r .cell-code}\nSB <- st_transform(SB, crs = crs(land_20070925)) #transform Santa Barbara County shapefile crs into Landsat CRS  \n```\n:::\n\n\n## Training Data Shapefile \n\n::: {.cell}\n\n```{.r .cell-code}\ntraining <- st_read(\"/Users/katebecker/Documents/Bren/Fall_Q/EDS_223/final/Landcover/RemoteSensing_Landcover/data/trainingdata.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `trainingdata' from data source \n  `/Users/katebecker/Documents/Bren/Fall_Q/EDS_223/final/Landcover/RemoteSensing_Landcover/data/trainingdata.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 40 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 215539.2 ymin: 3808948 xmax: 259927.3 ymax: 3823134\nProjected CRS: WGS 84 / UTM zone 11N\n```\n:::\n:::\n\n\n\n## Data Wrangling\n\n### Cropping Landsat to SB county shapefile\n\nIn order to use the raster in conjunction with the shapefile, each file must have the same spatial extent, therefore we will use crop and mask functions from the Terra package.\n\n::: {.cell}\n\n```{.r .cell-code}\n# crop Landsat raster to the extent of the SB county shapefile\nlandsat_crop <- crop(land_20070925, SB)\n\n# mask the raster to southern portion of SB county\n#Only the part of the raster that falls within the boundaries of sb county shapefile will be retained and the rest will recieve NA\nlandsat_mask <- mask(landsat_crop, SB)\n```\n:::\n\n\n### Converting Landsat values to reflectance\n\nIn order to visualize Landsat values, reflectance can be employed. Reflectance is a measure of how much light is reflected by a surface at different wavelengths and in remote sensing, satellites capture the reflected light in various spectral bands. Landsat satellites typically capture data in the visible, near-infrared, and short-wave infrared bands and can provide insights into land cover, vegetation health, and other environmental characteristics. It's also common for remote sensing data to have to convert from digital numbers to physical units to scale data for better visualization and analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#reclassify erroneous values as NA based on the specified matrix\n#The matrix below sets any value outside the range (7273 to 43636) to NA\nrcl <- matrix(c(-Inf, 7273, NA,\n                 43636, Inf, NA), ncol = 3, byrow = TRUE)\n\nlandsat <- classify(landsat_mask, rcl = rcl)\n\n# adjust values based on scaling factor to convert digital numbers to physical units \nlandsat <- (landsat * 0.0000275 - 0.2) * 100\n```\n:::\n\n\n\n### Transforming Training Data Shapefile CRS\n\nIn order to perform this analysis, all data must have the same CRS\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraining <- training %>%\n  st_transform(., crs = crs(landsat))\n```\n:::\n\n\n## Analysis\n\n### True Color Image of Santa Barbara County\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot true color image to check results by specifying which bands are used as the green, red, and blue channels\n# linear stretching is also employed for better visualziation \nplotRGB(landsat, r = 3, g = 2, b = 1, stretch = \"lin\")\n```\n\n::: {.cell-output-display}\n![](LandCover_copy_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n### Classifying Area to Particular Land Cover Type\n\nNext we will employ the training data to identify different locations within our area of interest containing one of the 4 land cover types. The reflectance values we found before(from landsat raster) are extracted at each site (specified by the training data spatial points) and compiled into a new dataframe relating land cover type to their spectral reflectance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract reflectance values at training sites\ntraining_values <- extract(landsat, training, df = TRUE)\n\n# convert training data to data frame by dropping geometries \ntraining_attributes <- training %>%\n  st_drop_geometry()\n\n# join training data attributes and extracted reflectance values into one dataframe by the ID\nSB_training <- left_join(training_values, training_attributes,\n                              by = c(\"ID\" = \"id\")) %>%\n  mutate(type = as.factor(type)) # convert landcover type to factor\n```\n:::\n\n\n### Train Decision Tree Classifier\n\nA decision tree classifier is a machine learning algorithm used for both regression and, more importantly in this case, classification. The structure of this tree is a hierarchy of binary decisions, where each node represents a decision based on the value of a particular feature, each branch represents an outcome of that decision, and each leaf node represents the final decision or the class label. Each dwecision rule has two outcomes based on a conditiona statement pertaining to vlaues in each spectral band. Training the decision tree works to create branches that separate the data into subsets that are homogeneous as possible with regard to the target variable (class label). Unfortunately, these should be used with cautious for small changes in the data can lead to different tree structures making them less suitable. The rpart() function needs to know the model formula and training data you would like to use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Using rpart() function\n# establish model formula\nSB_formula <- type ~ red + green + blue + NIR + SWIR1 + SWIR2\n\n# train decision tree, formula specifies the relationship between the variables, method = class because we're performing a classification, and the missing values are omitted from the data\nSB_decisiontree <- rpart(formula = SB_formula,\n                          data = SB_training,\n                          method = \"class\",\n                          na.action = na.omit)\n\n# visual representation of the decision tree\nprp(SB_decisiontree)\n```\n\n::: {.cell-output-display}\n![](LandCover_copy_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n### Applying the Decision Tree\n\nThe entire image can now be applied to the decision tree and therefore apply a model to the data. The terra package includes a predict() function that allows a model to be applied to the data but the names of the layers need to match the column names of the predictors used to train the tree. As a result, the function will return a raster layer with integer values. The output here will correspond to the factors levels in the training data. This step can also help you understand the classes your decision tree model was trained on and subsequently used for classifying the pixels in the Landsat image.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# classify image based on decision tree\nSB_classify <- predict(landsat, SB_decisiontree, type = \"class\", na.rm = TRUE)\n\n# inspect level to understand the order of classes in prediction\nlevels(SB_training$type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"green_vegetation\" \"soil_dead_grass\"  \"urban\"            \"water\"           \n```\n:::\n\n```{.r .cell-code}\n# This produces green_vegetation, soil_dead_grass, urban, and water levels \n```\n:::\n\n\n\n## Land Cover Visualization \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(SB_classify) +\n  tm_raster(title = \"Landcover Type\") +\n   tm_layout(legend.position = c(\"left\", \"bottom\"), title = \"Land Cover Map\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstars object downsampled to 1611 by 620 cells. See tm_shape manual (argument raster.downsample)\n```\n:::\n\n::: {.cell-output-display}\n![](LandCover_copy_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "LandCover_copy_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}